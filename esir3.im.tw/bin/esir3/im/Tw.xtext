// automatically generated by Xtext
grammar esir3.im.Tw with org.eclipse.xtext.common.Terminals

import "http://www.example.org/twitterModel2" 
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program returns Program:
	{Program}
	'Program'
	'{'
		(statement+=Statement ( ';' statement+=Statement)*)? 
	'}';

Statement: (Block | If | DeclarationVar | AND | OR | tweets_user | tweets_location | tweets_entity | tweets_date | ProportionPositif | ProportionNegatif | countTweet | countVisitProfil | CroissanceAbonne | moyFollowers | moyFavorited | GREATER | LESS | EQUALS | UtilisationVar | print | StringTw | ADD | MUL);

OpBool returns OpBool:
	AND | OR | GREATER | LESS | EQUALS;

Expression returns Expression:
	AND | OR | tweets_user | tweets_location | tweets_entity | tweets_date | ProportionPositif | ProportionNegatif | countTweet | countVisitProfil | CroissanceAbonne | moyFollowers | moyFavorited | GREATER | LESS | EQUALS | UtilisationVar | StringTw | ADD | MUL;


Block returns Block:
	{Block}
	'{'
		(statement+=Statement ( ";" statement+=Statement)*)?
	'}';


If returns If:
	'if' '(' condition=OpBool ')'
		ifBlock=Block
		('else' elseBlock=Block)?
	;

DeclarationVar returns DeclarationVar:
	 (name=String0)? 
	':='
	opDroite=Expression
	;

AND returns AND:
	'AND'
	'('
		exp1=Expression
		','
		exp2=Expression
	')';

OR returns OR:
	'OR'
	'('
		exp1=Expression
		','
		exp2=Expression
	')';

tweets_user returns tweets_user:
	'tweets_user'
	'{'
		(args+=UtilisationVar ( "," args+=UtilisationVar)*) 
	'}';

tweets_location returns tweets_location:
	'tweets_location'
	'{'
		(args+=UtilisationVar ( "," args+=UtilisationVar)*) 
	'}';

tweets_entity returns tweets_entity:
	'tweets_entity'
	'{'
		(args+=UtilisationVar ( "," args+=UtilisationVar)*) 
	'}';

tweets_date returns tweets_date:
	'tweets_date'
	'{'
		(args+=UtilisationVar ( "," args+=UtilisationVar)*) 
	'}';

ProportionPositif returns ProportionPositif:
	'ProportionPositif'
	'{'
		(args+=UtilisationVar ( "," args+=UtilisationVar)*) 
	'}';

ProportionNegatif returns ProportionNegatif:
	'ProportionNegatif'
	'{'
		(args+=UtilisationVar ( "," args+=UtilisationVar)*) 
	'}';

countTweet returns countTweet:
	'countTweet'
	'{'
		(args+=UtilisationVar ( "," args+=UtilisationVar)*) 
	'}';

countVisitProfil returns countVisitProfil:
	'countVisitProfil'
	'{'
		(args+=UtilisationVar ( "," args+=UtilisationVar)*) 
	'}';

CroissanceAbonne returns CroissanceAbonne:
	'CroissanceAbonne'
	'{'
		(args+=UtilisationVar ( "," args+=UtilisationVar)*) 
	'}';

moyFollowers returns moyFollowers:
	'moyFollowers'
	'{'
		(args+=UtilisationVar ( "," args+=UtilisationVar)*) 
	'}';

moyFavorited returns moyFavorited:
	'moyFavorited'
	'{'
		(args+=UtilisationVar ( "," args+=UtilisationVar)*) 
	'}';

	
GREATER returns GREATER:
	'GREATER'
	'('
		exp1=Expression
		','
		exp2=Expression
	')';

LESS returns LESS:
	'LESS'
	'('
		exp1=Expression
		','
		exp2=Expression
	')';

EQUALS returns EQUALS:
	'EQUALS'
	'('
		exp1=Expression
		','
		exp2=Expression
	')';

UtilisationVar returns UtilisationVar:
	nameVar=[DeclarationVar]
	;

print returns print:
	'print'
	'('
		expression=Expression
	')';

StringTw returns StringTw:
		stringTw=STRING
	;
	
ADD returns ADD:
	'ADD'
	'('
		exp1=Expression
		','
		exp2=Expression
	')';

MUL returns MUL:
	'MUL'
	'('
		exp1=Expression
		','
		exp2=Expression
	')';

String0 :
	ID;
	// TODO: implement this rule and an appropriate IValueConverter */;
