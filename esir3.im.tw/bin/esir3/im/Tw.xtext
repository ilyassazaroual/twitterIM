// automatically generated by Xtext
grammar esir3.im.Tw with org.eclipse.xtext.common.Terminals

import "http://www.example.org/twitterModel2" 
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program returns Program:
	{Program}
	'Program'
	'{'
		('statement' '{' statement+=Statement ( "," statement+=Statement)* '}' )?
	'}';

Statement returns Statement:
	Block | If | Const | Affectation | And | Or | Xor | tweets_user | tweets_location | tweets_entity | tweets_date | ProportionPositif | ProportionNegatif | countTweet | countVisitProfil | CroissanceAbonne | moyFollowers | moyFavorited | Greater | Less | Equal | SupEgal;


OpBool returns OpBool:
	And | Or | Xor | Greater | Less | Equal | SupEgal;


Expression returns Expression:
	Const | Affectation | And | Or | Xor | tweets_user | tweets_location | tweets_entity | tweets_date | ProportionPositif | ProportionNegatif | countTweet | countVisitProfil | CroissanceAbonne | moyFollowers | moyFavorited | Greater | Less | Equal | SupEgal;


Block returns Block:
	{Block}
	'Block'
	'{'
		('statement' '{' statement+=Statement ( "," statement+=Statement)* '}' )?
	'}';

If returns If:
	'If'
	'{'
		('elseBlock' elseBlock=Block)?
		'ifBlock' ifBlock=Block
		'condition' condition=OpBool
	'}';

Const returns Const:
	{Const}
	'Const'
	;

Affectation returns Affectation:
	'Affectation'
	'{'
		'variable' variable=Variable
		('opDroite' opDroite=Expression)?
	'}';

And returns And:
	'And'
	'{'
		'expressionG' expressionG=Expression
		'expressionD' expressionD=Expression
	'}';

Or returns Or:
	'Or'
	'{'
		'expressionG' expressionG=Expression
		'expressionD' expressionD=Expression
	'}';

Xor returns Xor:
	'Xor'
	'{'
		'expressionG' expressionG=Expression
		'expressionD' expressionD=Expression
	'}';

tweets_user returns tweets_user:
	{tweets_user}
	'tweets_user'
	'{'
		('args' '{' args+=Args ( "," args+=Args)* '}' )?
	'}';

tweets_location returns tweets_location:
	{tweets_location}
	'tweets_location'
	'{'
		('args' '{' args+=Args ( "," args+=Args)* '}' )?
	'}';

tweets_entity returns tweets_entity:
	{tweets_entity}
	'tweets_entity'
	'{'
		('args' '{' args+=Args ( "," args+=Args)* '}' )?
	'}';

tweets_date returns tweets_date:
	{tweets_date}
	'tweets_date'
	'{'
		('args' '{' args+=Args ( "," args+=Args)* '}' )?
	'}';

ProportionPositif returns ProportionPositif:
	{ProportionPositif}
	'ProportionPositif'
	'{'
		('args' '{' args+=Args ( "," args+=Args)* '}' )?
	'}';

ProportionNegatif returns ProportionNegatif:
	{ProportionNegatif}
	'ProportionNegatif'
	'{'
		('args' '{' args+=Args ( "," args+=Args)* '}' )?
	'}';

countTweet returns countTweet:
	{countTweet}
	'countTweet'
	'{'
		('args' '{' args+=Args ( "," args+=Args)* '}' )?
	'}';

countVisitProfil returns countVisitProfil:
	{countVisitProfil}
	'countVisitProfil'
	'{'
		('args' '{' args+=Args ( "," args+=Args)* '}' )?
	'}';

CroissanceAbonne returns CroissanceAbonne:
	{CroissanceAbonne}
	'CroissanceAbonne'
	'{'
		('args' '{' args+=Args ( "," args+=Args)* '}' )?
	'}';

moyFollowers returns moyFollowers:
	{moyFollowers}
	'moyFollowers'
	'{'
		('args' '{' args+=Args ( "," args+=Args)* '}' )?
	'}';

moyFavorited returns moyFavorited:
	{moyFavorited}
	'moyFavorited'
	'{'
		('args' '{' args+=Args ( "," args+=Args)* '}' )?
	'}';

Greater returns Greater:
	'Greater'
	'{'
		'expressionG' expressionG=Expression
		'expressionD' expressionD=Expression
	'}';

Less returns Less:
	'Less'
	'{'
		'expressionG' expressionG=Expression
		'expressionD' expressionD=Expression
	'}';

Equal returns Equal:
	'Equal'
	'{'
		'expressionG' expressionG=Expression
		'expressionD' expressionD=Expression
	'}';

SupEgal returns SupEgal:
	'SupEgal'
	'{'
		'expressionG' expressionG=Expression
		'expressionD' expressionD=Expression
	'}';

Args returns Args:
	{Args}
	'Args'
	'{'
		('arg' arg=String0)?
	'}';

String0 :
	STRING /* TODO: implement this rule and an appropriate IValueConverter */;

Variable returns Variable:
	{Variable}
	'Variable'
	'{'
		('nameVariable' nameVariable=String0)?
	'}';
