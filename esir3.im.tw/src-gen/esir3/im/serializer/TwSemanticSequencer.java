/*
 * generated by Xtext 2.10.0
 */
package esir3.im.serializer;

import com.google.inject.Inject;
import esir3.im.services.TwGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import twitterModel2.Affectation;
import twitterModel2.And;
import twitterModel2.Args;
import twitterModel2.Block;
import twitterModel2.Const;
import twitterModel2.CroissanceAbonne;
import twitterModel2.Equal;
import twitterModel2.Greater;
import twitterModel2.If;
import twitterModel2.Less;
import twitterModel2.Or;
import twitterModel2.Program;
import twitterModel2.ProportionNegatif;
import twitterModel2.ProportionPositif;
import twitterModel2.SupEgal;
import twitterModel2.TwitterModel2Package;
import twitterModel2.Variable;
import twitterModel2.Xor;
import twitterModel2.countTweet;
import twitterModel2.countVisitProfil;
import twitterModel2.moyFavorited;
import twitterModel2.moyFollowers;
import twitterModel2.tweets_date;
import twitterModel2.tweets_entity;
import twitterModel2.tweets_location;
import twitterModel2.tweets_user;

@SuppressWarnings("all")
public class TwSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TwGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TwitterModel2Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TwitterModel2Package.AFFECTATION:
				sequence_Affectation(context, (Affectation) semanticObject); 
				return; 
			case TwitterModel2Package.AND:
				sequence_And(context, (And) semanticObject); 
				return; 
			case TwitterModel2Package.ARGS:
				sequence_Args(context, (Args) semanticObject); 
				return; 
			case TwitterModel2Package.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case TwitterModel2Package.CONST:
				sequence_Const(context, (Const) semanticObject); 
				return; 
			case TwitterModel2Package.CROISSANCE_ABONNE:
				sequence_CroissanceAbonne(context, (CroissanceAbonne) semanticObject); 
				return; 
			case TwitterModel2Package.EQUAL:
				sequence_Equal(context, (Equal) semanticObject); 
				return; 
			case TwitterModel2Package.GREATER:
				sequence_Greater(context, (Greater) semanticObject); 
				return; 
			case TwitterModel2Package.IF:
				sequence_If(context, (If) semanticObject); 
				return; 
			case TwitterModel2Package.LESS:
				sequence_Less(context, (Less) semanticObject); 
				return; 
			case TwitterModel2Package.OR:
				sequence_Or(context, (Or) semanticObject); 
				return; 
			case TwitterModel2Package.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case TwitterModel2Package.PROPORTION_NEGATIF:
				sequence_ProportionNegatif(context, (ProportionNegatif) semanticObject); 
				return; 
			case TwitterModel2Package.PROPORTION_POSITIF:
				sequence_ProportionPositif(context, (ProportionPositif) semanticObject); 
				return; 
			case TwitterModel2Package.SUP_EGAL:
				sequence_SupEgal(context, (SupEgal) semanticObject); 
				return; 
			case TwitterModel2Package.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case TwitterModel2Package.XOR:
				sequence_Xor(context, (Xor) semanticObject); 
				return; 
			case TwitterModel2Package.COUNT_TWEET:
				sequence_countTweet(context, (countTweet) semanticObject); 
				return; 
			case TwitterModel2Package.COUNT_VISIT_PROFIL:
				sequence_countVisitProfil(context, (countVisitProfil) semanticObject); 
				return; 
			case TwitterModel2Package.MOY_FAVORITED:
				sequence_moyFavorited(context, (moyFavorited) semanticObject); 
				return; 
			case TwitterModel2Package.MOY_FOLLOWERS:
				sequence_moyFollowers(context, (moyFollowers) semanticObject); 
				return; 
			case TwitterModel2Package.TWEETS_DATE:
				sequence_tweets_date(context, (tweets_date) semanticObject); 
				return; 
			case TwitterModel2Package.TWEETS_ENTITY:
				sequence_tweets_entity(context, (tweets_entity) semanticObject); 
				return; 
			case TwitterModel2Package.TWEETS_LOCATION:
				sequence_tweets_location(context, (tweets_location) semanticObject); 
				return; 
			case TwitterModel2Package.TWEETS_USER:
				sequence_tweets_user(context, (tweets_user) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Statement returns Affectation
	 *     Expression returns Affectation
	 *     Affectation returns Affectation
	 *
	 * Constraint:
	 *     (variable=Variable opDroite=Expression?)
	 */
	protected void sequence_Affectation(ISerializationContext context, Affectation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns And
	 *     OpBool returns And
	 *     Expression returns And
	 *     And returns And
	 *
	 * Constraint:
	 *     (expressionG=Expression expressionD=Expression)
	 */
	protected void sequence_And(ISerializationContext context, And semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_G) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_G));
			if (transientValues.isValueTransient(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_D) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_D));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndAccess().getExpressionGExpressionParserRuleCall_3_0(), semanticObject.getExpressionG());
		feeder.accept(grammarAccess.getAndAccess().getExpressionDExpressionParserRuleCall_5_0(), semanticObject.getExpressionD());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Args returns Args
	 *
	 * Constraint:
	 *     arg=String0?
	 */
	protected void sequence_Args(ISerializationContext context, Args semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Block
	 *     Block returns Block
	 *
	 * Constraint:
	 *     (statement+=Statement statement+=Statement*)?
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Const
	 *     Expression returns Const
	 *     Const returns Const
	 *
	 * Constraint:
	 *     {Const}
	 */
	protected void sequence_Const(ISerializationContext context, Const semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns CroissanceAbonne
	 *     Expression returns CroissanceAbonne
	 *     CroissanceAbonne returns CroissanceAbonne
	 *
	 * Constraint:
	 *     (args+=Args args+=Args*)?
	 */
	protected void sequence_CroissanceAbonne(ISerializationContext context, CroissanceAbonne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Equal
	 *     OpBool returns Equal
	 *     Expression returns Equal
	 *     Equal returns Equal
	 *
	 * Constraint:
	 *     (expressionG=Expression expressionD=Expression)
	 */
	protected void sequence_Equal(ISerializationContext context, Equal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_G) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_G));
			if (transientValues.isValueTransient(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_D) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_D));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEqualAccess().getExpressionGExpressionParserRuleCall_3_0(), semanticObject.getExpressionG());
		feeder.accept(grammarAccess.getEqualAccess().getExpressionDExpressionParserRuleCall_5_0(), semanticObject.getExpressionD());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Greater
	 *     OpBool returns Greater
	 *     Expression returns Greater
	 *     Greater returns Greater
	 *
	 * Constraint:
	 *     (expressionG=Expression expressionD=Expression)
	 */
	protected void sequence_Greater(ISerializationContext context, Greater semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_G) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_G));
			if (transientValues.isValueTransient(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_D) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_D));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGreaterAccess().getExpressionGExpressionParserRuleCall_3_0(), semanticObject.getExpressionG());
		feeder.accept(grammarAccess.getGreaterAccess().getExpressionDExpressionParserRuleCall_5_0(), semanticObject.getExpressionD());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns If
	 *     If returns If
	 *
	 * Constraint:
	 *     (elseBlock=Block? ifBlock=Block condition=OpBool)
	 */
	protected void sequence_If(ISerializationContext context, If semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Less
	 *     OpBool returns Less
	 *     Expression returns Less
	 *     Less returns Less
	 *
	 * Constraint:
	 *     (expressionG=Expression expressionD=Expression)
	 */
	protected void sequence_Less(ISerializationContext context, Less semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_G) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_G));
			if (transientValues.isValueTransient(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_D) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_D));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLessAccess().getExpressionGExpressionParserRuleCall_3_0(), semanticObject.getExpressionG());
		feeder.accept(grammarAccess.getLessAccess().getExpressionDExpressionParserRuleCall_5_0(), semanticObject.getExpressionD());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Or
	 *     OpBool returns Or
	 *     Expression returns Or
	 *     Or returns Or
	 *
	 * Constraint:
	 *     (expressionG=Expression expressionD=Expression)
	 */
	protected void sequence_Or(ISerializationContext context, Or semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_G) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_G));
			if (transientValues.isValueTransient(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_D) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_D));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrAccess().getExpressionGExpressionParserRuleCall_3_0(), semanticObject.getExpressionG());
		feeder.accept(grammarAccess.getOrAccess().getExpressionDExpressionParserRuleCall_5_0(), semanticObject.getExpressionD());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (statement+=Statement statement+=Statement*)?
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns ProportionNegatif
	 *     Expression returns ProportionNegatif
	 *     ProportionNegatif returns ProportionNegatif
	 *
	 * Constraint:
	 *     (args+=Args args+=Args*)?
	 */
	protected void sequence_ProportionNegatif(ISerializationContext context, ProportionNegatif semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns ProportionPositif
	 *     Expression returns ProportionPositif
	 *     ProportionPositif returns ProportionPositif
	 *
	 * Constraint:
	 *     (args+=Args args+=Args*)?
	 */
	protected void sequence_ProportionPositif(ISerializationContext context, ProportionPositif semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns SupEgal
	 *     OpBool returns SupEgal
	 *     Expression returns SupEgal
	 *     SupEgal returns SupEgal
	 *
	 * Constraint:
	 *     (expressionG=Expression expressionD=Expression)
	 */
	protected void sequence_SupEgal(ISerializationContext context, SupEgal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_G) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_G));
			if (transientValues.isValueTransient(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_D) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_D));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSupEgalAccess().getExpressionGExpressionParserRuleCall_3_0(), semanticObject.getExpressionG());
		feeder.accept(grammarAccess.getSupEgalAccess().getExpressionDExpressionParserRuleCall_5_0(), semanticObject.getExpressionD());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     nameVariable=String0?
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Xor
	 *     OpBool returns Xor
	 *     Expression returns Xor
	 *     Xor returns Xor
	 *
	 * Constraint:
	 *     (expressionG=Expression expressionD=Expression)
	 */
	protected void sequence_Xor(ISerializationContext context, Xor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_G) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_G));
			if (transientValues.isValueTransient(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_D) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterModel2Package.Literals.OP_BOOL__EXPRESSION_D));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXorAccess().getExpressionGExpressionParserRuleCall_3_0(), semanticObject.getExpressionG());
		feeder.accept(grammarAccess.getXorAccess().getExpressionDExpressionParserRuleCall_5_0(), semanticObject.getExpressionD());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns countTweet
	 *     Expression returns countTweet
	 *     countTweet returns countTweet
	 *
	 * Constraint:
	 *     (args+=Args args+=Args*)?
	 */
	protected void sequence_countTweet(ISerializationContext context, countTweet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns countVisitProfil
	 *     Expression returns countVisitProfil
	 *     countVisitProfil returns countVisitProfil
	 *
	 * Constraint:
	 *     (args+=Args args+=Args*)?
	 */
	protected void sequence_countVisitProfil(ISerializationContext context, countVisitProfil semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns moyFavorited
	 *     Expression returns moyFavorited
	 *     moyFavorited returns moyFavorited
	 *
	 * Constraint:
	 *     (args+=Args args+=Args*)?
	 */
	protected void sequence_moyFavorited(ISerializationContext context, moyFavorited semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns moyFollowers
	 *     Expression returns moyFollowers
	 *     moyFollowers returns moyFollowers
	 *
	 * Constraint:
	 *     (args+=Args args+=Args*)?
	 */
	protected void sequence_moyFollowers(ISerializationContext context, moyFollowers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns tweets_date
	 *     Expression returns tweets_date
	 *     tweets_date returns tweets_date
	 *
	 * Constraint:
	 *     (args+=Args args+=Args*)?
	 */
	protected void sequence_tweets_date(ISerializationContext context, tweets_date semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns tweets_entity
	 *     Expression returns tweets_entity
	 *     tweets_entity returns tweets_entity
	 *
	 * Constraint:
	 *     (args+=Args args+=Args*)?
	 */
	protected void sequence_tweets_entity(ISerializationContext context, tweets_entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns tweets_location
	 *     Expression returns tweets_location
	 *     tweets_location returns tweets_location
	 *
	 * Constraint:
	 *     (args+=Args args+=Args*)?
	 */
	protected void sequence_tweets_location(ISerializationContext context, tweets_location semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns tweets_user
	 *     Expression returns tweets_user
	 *     tweets_user returns tweets_user
	 *
	 * Constraint:
	 *     (args+=Args args+=Args*)?
	 */
	protected void sequence_tweets_user(ISerializationContext context, tweets_user semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
