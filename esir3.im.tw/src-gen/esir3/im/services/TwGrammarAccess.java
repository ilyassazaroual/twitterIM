/*
 * generated by Xtext 2.10.0
 */
package esir3.im.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TwGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProgramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cStatementStatementParserRuleCall_3_0_0 = (RuleCall)cStatementAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cStatementAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_3_1_1_0 = (RuleCall)cStatementAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Program:
		//	{Program} 'Program' '{' (statement+=Statement (';' statement+=Statement)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Program} 'Program' '{' (statement+=Statement (';' statement+=Statement)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//'Program'
		public Keyword getProgramKeyword_1() { return cProgramKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(statement+=Statement (';' statement+=Statement)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//statement+=Statement
		public Assignment getStatementAssignment_3_0() { return cStatementAssignment_3_0; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0_0() { return cStatementStatementParserRuleCall_3_0_0; }
		
		//(';' statement+=Statement)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_0() { return cSemicolonKeyword_3_1_0; }
		
		//statement+=Statement
		public Assignment getStatementAssignment_3_1_1() { return cStatementAssignment_3_1_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_1_1_0() { return cStatementStatementParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDeclarationVarParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cANDParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cORParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTweets_userParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTweets_locationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTweets_entityParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTweets_dateParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cProportionPositifParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cProportionNegatifParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cCountTweetParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cCountVisitProfilParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cCroissanceAbonneParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cMoyFollowersParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cMoyFavoritedParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cGREATERParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cLESSParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cEQUALSParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cUtilisationVarParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cPrintParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cStringTwParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cADDParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cMULParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		
		//Statement:
		//	Block | If | DeclarationVar | AND | OR | tweets_user | tweets_location | tweets_entity | tweets_date |
		//	ProportionPositif | ProportionNegatif | countTweet | countVisitProfil | CroissanceAbonne | moyFollowers |
		//	moyFavorited | GREATER | LESS | EQUALS | UtilisationVar | print | StringTw | ADD | MUL;
		@Override public ParserRule getRule() { return rule; }
		
		//Block | If | DeclarationVar | AND | OR | tweets_user | tweets_location | tweets_entity | tweets_date | ProportionPositif
		//| ProportionNegatif | countTweet | countVisitProfil | CroissanceAbonne | moyFollowers | moyFavorited | GREATER | LESS
		//| EQUALS | UtilisationVar | print | StringTw | ADD | MUL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Block
		public RuleCall getBlockParserRuleCall_0() { return cBlockParserRuleCall_0; }
		
		//If
		public RuleCall getIfParserRuleCall_1() { return cIfParserRuleCall_1; }
		
		//DeclarationVar
		public RuleCall getDeclarationVarParserRuleCall_2() { return cDeclarationVarParserRuleCall_2; }
		
		//AND
		public RuleCall getANDParserRuleCall_3() { return cANDParserRuleCall_3; }
		
		//OR
		public RuleCall getORParserRuleCall_4() { return cORParserRuleCall_4; }
		
		//tweets_user
		public RuleCall getTweets_userParserRuleCall_5() { return cTweets_userParserRuleCall_5; }
		
		//tweets_location
		public RuleCall getTweets_locationParserRuleCall_6() { return cTweets_locationParserRuleCall_6; }
		
		//tweets_entity
		public RuleCall getTweets_entityParserRuleCall_7() { return cTweets_entityParserRuleCall_7; }
		
		//tweets_date
		public RuleCall getTweets_dateParserRuleCall_8() { return cTweets_dateParserRuleCall_8; }
		
		//ProportionPositif
		public RuleCall getProportionPositifParserRuleCall_9() { return cProportionPositifParserRuleCall_9; }
		
		//ProportionNegatif
		public RuleCall getProportionNegatifParserRuleCall_10() { return cProportionNegatifParserRuleCall_10; }
		
		//countTweet
		public RuleCall getCountTweetParserRuleCall_11() { return cCountTweetParserRuleCall_11; }
		
		//countVisitProfil
		public RuleCall getCountVisitProfilParserRuleCall_12() { return cCountVisitProfilParserRuleCall_12; }
		
		//CroissanceAbonne
		public RuleCall getCroissanceAbonneParserRuleCall_13() { return cCroissanceAbonneParserRuleCall_13; }
		
		//moyFollowers
		public RuleCall getMoyFollowersParserRuleCall_14() { return cMoyFollowersParserRuleCall_14; }
		
		//moyFavorited
		public RuleCall getMoyFavoritedParserRuleCall_15() { return cMoyFavoritedParserRuleCall_15; }
		
		//GREATER
		public RuleCall getGREATERParserRuleCall_16() { return cGREATERParserRuleCall_16; }
		
		//LESS
		public RuleCall getLESSParserRuleCall_17() { return cLESSParserRuleCall_17; }
		
		//EQUALS
		public RuleCall getEQUALSParserRuleCall_18() { return cEQUALSParserRuleCall_18; }
		
		//UtilisationVar
		public RuleCall getUtilisationVarParserRuleCall_19() { return cUtilisationVarParserRuleCall_19; }
		
		//print
		public RuleCall getPrintParserRuleCall_20() { return cPrintParserRuleCall_20; }
		
		//StringTw
		public RuleCall getStringTwParserRuleCall_21() { return cStringTwParserRuleCall_21; }
		
		//ADD
		public RuleCall getADDParserRuleCall_22() { return cADDParserRuleCall_22; }
		
		//MUL
		public RuleCall getMULParserRuleCall_23() { return cMULParserRuleCall_23; }
	}
	public class OpBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.OpBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cANDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cORParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGREATERParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLESSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEQUALSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//OpBool:
		//	AND | OR | GREATER | LESS | EQUALS;
		@Override public ParserRule getRule() { return rule; }
		
		//AND | OR | GREATER | LESS | EQUALS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND
		public RuleCall getANDParserRuleCall_0() { return cANDParserRuleCall_0; }
		
		//OR
		public RuleCall getORParserRuleCall_1() { return cORParserRuleCall_1; }
		
		//GREATER
		public RuleCall getGREATERParserRuleCall_2() { return cGREATERParserRuleCall_2; }
		
		//LESS
		public RuleCall getLESSParserRuleCall_3() { return cLESSParserRuleCall_3; }
		
		//EQUALS
		public RuleCall getEQUALSParserRuleCall_4() { return cEQUALSParserRuleCall_4; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cANDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cORParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTweets_userParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTweets_locationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTweets_entityParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTweets_dateParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cProportionPositifParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cProportionNegatifParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cCountTweetParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCountVisitProfilParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cCroissanceAbonneParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cMoyFollowersParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cMoyFavoritedParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cGREATERParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cLESSParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cEQUALSParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cUtilisationVarParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cStringTwParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cADDParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cMULParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		
		//Expression:
		//	AND | OR | tweets_user | tweets_location | tweets_entity | tweets_date | ProportionPositif | ProportionNegatif |
		//	countTweet | countVisitProfil | CroissanceAbonne | moyFollowers | moyFavorited | GREATER | LESS | EQUALS |
		//	UtilisationVar | StringTw | ADD | MUL;
		@Override public ParserRule getRule() { return rule; }
		
		//AND | OR | tweets_user | tweets_location | tweets_entity | tweets_date | ProportionPositif | ProportionNegatif |
		//countTweet | countVisitProfil | CroissanceAbonne | moyFollowers | moyFavorited | GREATER | LESS | EQUALS |
		//UtilisationVar | StringTw | ADD | MUL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND
		public RuleCall getANDParserRuleCall_0() { return cANDParserRuleCall_0; }
		
		//OR
		public RuleCall getORParserRuleCall_1() { return cORParserRuleCall_1; }
		
		//tweets_user
		public RuleCall getTweets_userParserRuleCall_2() { return cTweets_userParserRuleCall_2; }
		
		//tweets_location
		public RuleCall getTweets_locationParserRuleCall_3() { return cTweets_locationParserRuleCall_3; }
		
		//tweets_entity
		public RuleCall getTweets_entityParserRuleCall_4() { return cTweets_entityParserRuleCall_4; }
		
		//tweets_date
		public RuleCall getTweets_dateParserRuleCall_5() { return cTweets_dateParserRuleCall_5; }
		
		//ProportionPositif
		public RuleCall getProportionPositifParserRuleCall_6() { return cProportionPositifParserRuleCall_6; }
		
		//ProportionNegatif
		public RuleCall getProportionNegatifParserRuleCall_7() { return cProportionNegatifParserRuleCall_7; }
		
		//countTweet
		public RuleCall getCountTweetParserRuleCall_8() { return cCountTweetParserRuleCall_8; }
		
		//countVisitProfil
		public RuleCall getCountVisitProfilParserRuleCall_9() { return cCountVisitProfilParserRuleCall_9; }
		
		//CroissanceAbonne
		public RuleCall getCroissanceAbonneParserRuleCall_10() { return cCroissanceAbonneParserRuleCall_10; }
		
		//moyFollowers
		public RuleCall getMoyFollowersParserRuleCall_11() { return cMoyFollowersParserRuleCall_11; }
		
		//moyFavorited
		public RuleCall getMoyFavoritedParserRuleCall_12() { return cMoyFavoritedParserRuleCall_12; }
		
		//GREATER
		public RuleCall getGREATERParserRuleCall_13() { return cGREATERParserRuleCall_13; }
		
		//LESS
		public RuleCall getLESSParserRuleCall_14() { return cLESSParserRuleCall_14; }
		
		//EQUALS
		public RuleCall getEQUALSParserRuleCall_15() { return cEQUALSParserRuleCall_15; }
		
		//UtilisationVar
		public RuleCall getUtilisationVarParserRuleCall_16() { return cUtilisationVarParserRuleCall_16; }
		
		//StringTw
		public RuleCall getStringTwParserRuleCall_17() { return cStringTwParserRuleCall_17; }
		
		//ADD
		public RuleCall getADDParserRuleCall_18() { return cADDParserRuleCall_18; }
		
		//MUL
		public RuleCall getMULParserRuleCall_19() { return cMULParserRuleCall_19; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cStatementStatementParserRuleCall_2_0_0 = (RuleCall)cStatementAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cStatementAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_2_1_1_0 = (RuleCall)cStatementAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	{Block} '{' (statement+=Statement (";" statement+=Statement)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' (statement+=Statement (";" statement+=Statement)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(statement+=Statement (";" statement+=Statement)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//statement+=Statement
		public Assignment getStatementAssignment_2_0() { return cStatementAssignment_2_0; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0_0() { return cStatementStatementParserRuleCall_2_0_0; }
		
		//(";" statement+=Statement)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1_0() { return cSemicolonKeyword_2_1_0; }
		
		//statement+=Statement
		public Assignment getStatementAssignment_2_1_1() { return cStatementAssignment_2_1_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_1_1_0() { return cStatementStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionOpBoolParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIfBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIfBlockBlockParserRuleCall_4_0 = (RuleCall)cIfBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		
		//If:
		//	'if' '(' condition=OpBool ')' ifBlock=Block ('else' elseBlock=Block)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' condition=OpBool ')' ifBlock=Block ('else' elseBlock=Block)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=OpBool
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//OpBool
		public RuleCall getConditionOpBoolParserRuleCall_2_0() { return cConditionOpBoolParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//ifBlock=Block
		public Assignment getIfBlockAssignment_4() { return cIfBlockAssignment_4; }
		
		//Block
		public RuleCall getIfBlockBlockParserRuleCall_4_0() { return cIfBlockBlockParserRuleCall_4_0; }
		
		//('else' elseBlock=Block)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseBlock=Block
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }
		
		//Block
		public RuleCall getElseBlockBlockParserRuleCall_5_1_0() { return cElseBlockBlockParserRuleCall_5_1_0; }
	}
	public class DeclarationVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.DeclarationVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameString0ParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpDroiteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpDroiteExpressionParserRuleCall_2_0 = (RuleCall)cOpDroiteAssignment_2.eContents().get(0);
		
		//DeclarationVar:
		//	name=String0? ':=' opDroite=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=String0? ':=' opDroite=Expression
		public Group getGroup() { return cGroup; }
		
		//name=String0?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//String0
		public RuleCall getNameString0ParserRuleCall_0_0() { return cNameString0ParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//opDroite=Expression
		public Assignment getOpDroiteAssignment_2() { return cOpDroiteAssignment_2; }
		
		//Expression
		public RuleCall getOpDroiteExpressionParserRuleCall_2_0() { return cOpDroiteExpressionParserRuleCall_2_0; }
	}
	public class ANDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.AND");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cANDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExp1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExp1ExpressionParserRuleCall_2_0 = (RuleCall)cExp1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExp2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExp2ExpressionParserRuleCall_4_0 = (RuleCall)cExp2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AND:
		//	'AND' '(' exp1=Expression ',' exp2=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'AND' '(' exp1=Expression ',' exp2=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'AND'
		public Keyword getANDKeyword_0() { return cANDKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp1=Expression
		public Assignment getExp1Assignment_2() { return cExp1Assignment_2; }
		
		//Expression
		public RuleCall getExp1ExpressionParserRuleCall_2_0() { return cExp1ExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//exp2=Expression
		public Assignment getExp2Assignment_4() { return cExp2Assignment_4; }
		
		//Expression
		public RuleCall getExp2ExpressionParserRuleCall_4_0() { return cExp2ExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.OR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cORKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExp1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExp1ExpressionParserRuleCall_2_0 = (RuleCall)cExp1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExp2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExp2ExpressionParserRuleCall_4_0 = (RuleCall)cExp2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OR:
		//	'OR' '(' exp1=Expression ',' exp2=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'OR' '(' exp1=Expression ',' exp2=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'OR'
		public Keyword getORKeyword_0() { return cORKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp1=Expression
		public Assignment getExp1Assignment_2() { return cExp1Assignment_2; }
		
		//Expression
		public RuleCall getExp1ExpressionParserRuleCall_2_0() { return cExp1ExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//exp2=Expression
		public Assignment getExp2Assignment_4() { return cExp2Assignment_4; }
		
		//Expression
		public RuleCall getExp2ExpressionParserRuleCall_4_0() { return cExp2ExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class Tweets_userElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.tweets_user");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTweets_userKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//tweets_user:
		//	'tweets_user' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'tweets_user' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'tweets_user'
		public Keyword getTweets_userKeyword_0() { return cTweets_userKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(args+=UtilisationVar ("," args+=UtilisationVar)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_0_0() { return cArgsUtilisationVarParserRuleCall_2_0_0; }
		
		//("," args+=UtilisationVar)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_1_1_0() { return cArgsUtilisationVarParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class Tweets_locationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.tweets_location");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTweets_locationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//tweets_location:
		//	'tweets_location' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'tweets_location' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'tweets_location'
		public Keyword getTweets_locationKeyword_0() { return cTweets_locationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(args+=UtilisationVar ("," args+=UtilisationVar)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_0_0() { return cArgsUtilisationVarParserRuleCall_2_0_0; }
		
		//("," args+=UtilisationVar)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_1_1_0() { return cArgsUtilisationVarParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class Tweets_entityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.tweets_entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTweets_entityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//tweets_entity:
		//	'tweets_entity' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'tweets_entity' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'tweets_entity'
		public Keyword getTweets_entityKeyword_0() { return cTweets_entityKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(args+=UtilisationVar ("," args+=UtilisationVar)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_0_0() { return cArgsUtilisationVarParserRuleCall_2_0_0; }
		
		//("," args+=UtilisationVar)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_1_1_0() { return cArgsUtilisationVarParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class Tweets_dateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.tweets_date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTweets_dateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//tweets_date:
		//	'tweets_date' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'tweets_date' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'tweets_date'
		public Keyword getTweets_dateKeyword_0() { return cTweets_dateKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(args+=UtilisationVar ("," args+=UtilisationVar)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_0_0() { return cArgsUtilisationVarParserRuleCall_2_0_0; }
		
		//("," args+=UtilisationVar)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_1_1_0() { return cArgsUtilisationVarParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ProportionPositifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.ProportionPositif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProportionPositifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProportionPositif:
		//	'ProportionPositif' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ProportionPositif' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'ProportionPositif'
		public Keyword getProportionPositifKeyword_0() { return cProportionPositifKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(args+=UtilisationVar ("," args+=UtilisationVar)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_0_0() { return cArgsUtilisationVarParserRuleCall_2_0_0; }
		
		//("," args+=UtilisationVar)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_1_1_0() { return cArgsUtilisationVarParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ProportionNegatifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.ProportionNegatif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProportionNegatifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProportionNegatif:
		//	'ProportionNegatif' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ProportionNegatif' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'ProportionNegatif'
		public Keyword getProportionNegatifKeyword_0() { return cProportionNegatifKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(args+=UtilisationVar ("," args+=UtilisationVar)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_0_0() { return cArgsUtilisationVarParserRuleCall_2_0_0; }
		
		//("," args+=UtilisationVar)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_1_1_0() { return cArgsUtilisationVarParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CountTweetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.countTweet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCountTweetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//countTweet:
		//	'countTweet' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'countTweet' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'countTweet'
		public Keyword getCountTweetKeyword_0() { return cCountTweetKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(args+=UtilisationVar ("," args+=UtilisationVar)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_0_0() { return cArgsUtilisationVarParserRuleCall_2_0_0; }
		
		//("," args+=UtilisationVar)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_1_1_0() { return cArgsUtilisationVarParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CountVisitProfilElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.countVisitProfil");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCountVisitProfilKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//countVisitProfil:
		//	'countVisitProfil' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'countVisitProfil' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'countVisitProfil'
		public Keyword getCountVisitProfilKeyword_0() { return cCountVisitProfilKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(args+=UtilisationVar ("," args+=UtilisationVar)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_0_0() { return cArgsUtilisationVarParserRuleCall_2_0_0; }
		
		//("," args+=UtilisationVar)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_1_1_0() { return cArgsUtilisationVarParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CroissanceAbonneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.CroissanceAbonne");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCroissanceAbonneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CroissanceAbonne:
		//	'CroissanceAbonne' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CroissanceAbonne' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'CroissanceAbonne'
		public Keyword getCroissanceAbonneKeyword_0() { return cCroissanceAbonneKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(args+=UtilisationVar ("," args+=UtilisationVar)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_0_0() { return cArgsUtilisationVarParserRuleCall_2_0_0; }
		
		//("," args+=UtilisationVar)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_1_1_0() { return cArgsUtilisationVarParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MoyFollowersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.moyFollowers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoyFollowersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//moyFollowers:
		//	'moyFollowers' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'moyFollowers' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'moyFollowers'
		public Keyword getMoyFollowersKeyword_0() { return cMoyFollowersKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(args+=UtilisationVar ("," args+=UtilisationVar)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_0_0() { return cArgsUtilisationVarParserRuleCall_2_0_0; }
		
		//("," args+=UtilisationVar)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_1_1_0() { return cArgsUtilisationVarParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MoyFavoritedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.moyFavorited");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoyFavoritedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsUtilisationVarParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//moyFavorited:
		//	'moyFavorited' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'moyFavorited' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'moyFavorited'
		public Keyword getMoyFavoritedKeyword_0() { return cMoyFavoritedKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(args+=UtilisationVar ("," args+=UtilisationVar)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_0_0() { return cArgsUtilisationVarParserRuleCall_2_0_0; }
		
		//("," args+=UtilisationVar)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=UtilisationVar
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//UtilisationVar
		public RuleCall getArgsUtilisationVarParserRuleCall_2_1_1_0() { return cArgsUtilisationVarParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class GREATERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.GREATER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGREATERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExp1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExp1ExpressionParserRuleCall_2_0 = (RuleCall)cExp1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExp2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExp2ExpressionParserRuleCall_4_0 = (RuleCall)cExp2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GREATER:
		//	'GREATER' '(' exp1=Expression ',' exp2=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'GREATER' '(' exp1=Expression ',' exp2=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'GREATER'
		public Keyword getGREATERKeyword_0() { return cGREATERKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp1=Expression
		public Assignment getExp1Assignment_2() { return cExp1Assignment_2; }
		
		//Expression
		public RuleCall getExp1ExpressionParserRuleCall_2_0() { return cExp1ExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//exp2=Expression
		public Assignment getExp2Assignment_4() { return cExp2Assignment_4; }
		
		//Expression
		public RuleCall getExp2ExpressionParserRuleCall_4_0() { return cExp2ExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class LESSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.LESS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLESSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExp1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExp1ExpressionParserRuleCall_2_0 = (RuleCall)cExp1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExp2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExp2ExpressionParserRuleCall_4_0 = (RuleCall)cExp2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LESS:
		//	'LESS' '(' exp1=Expression ',' exp2=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'LESS' '(' exp1=Expression ',' exp2=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'LESS'
		public Keyword getLESSKeyword_0() { return cLESSKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp1=Expression
		public Assignment getExp1Assignment_2() { return cExp1Assignment_2; }
		
		//Expression
		public RuleCall getExp1ExpressionParserRuleCall_2_0() { return cExp1ExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//exp2=Expression
		public Assignment getExp2Assignment_4() { return cExp2Assignment_4; }
		
		//Expression
		public RuleCall getExp2ExpressionParserRuleCall_4_0() { return cExp2ExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class EQUALSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.EQUALS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEQUALSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExp1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExp1ExpressionParserRuleCall_2_0 = (RuleCall)cExp1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExp2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExp2ExpressionParserRuleCall_4_0 = (RuleCall)cExp2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EQUALS:
		//	'EQUALS' '(' exp1=Expression ',' exp2=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'EQUALS' '(' exp1=Expression ',' exp2=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'EQUALS'
		public Keyword getEQUALSKeyword_0() { return cEQUALSKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp1=Expression
		public Assignment getExp1Assignment_2() { return cExp1Assignment_2; }
		
		//Expression
		public RuleCall getExp1ExpressionParserRuleCall_2_0() { return cExp1ExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//exp2=Expression
		public Assignment getExp2Assignment_4() { return cExp2Assignment_4; }
		
		//Expression
		public RuleCall getExp2ExpressionParserRuleCall_4_0() { return cExp2ExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class UtilisationVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.UtilisationVar");
		private final Assignment cNameVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNameVarDeclarationVarCrossReference_0 = (CrossReference)cNameVarAssignment.eContents().get(0);
		private final RuleCall cNameVarDeclarationVarIDTerminalRuleCall_0_1 = (RuleCall)cNameVarDeclarationVarCrossReference_0.eContents().get(1);
		
		//UtilisationVar:
		//	nameVar=[DeclarationVar];
		@Override public ParserRule getRule() { return rule; }
		
		//nameVar=[DeclarationVar]
		public Assignment getNameVarAssignment() { return cNameVarAssignment; }
		
		//[DeclarationVar]
		public CrossReference getNameVarDeclarationVarCrossReference_0() { return cNameVarDeclarationVarCrossReference_0; }
		
		//ID
		public RuleCall getNameVarDeclarationVarIDTerminalRuleCall_0_1() { return cNameVarDeclarationVarIDTerminalRuleCall_0_1; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//print:
		//	'print' '(' expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'print' '(' expression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class StringTwElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.StringTw");
		private final Assignment cStringTwAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringTwSTRINGTerminalRuleCall_0 = (RuleCall)cStringTwAssignment.eContents().get(0);
		
		//StringTw:
		//	stringTw=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//stringTw=STRING
		public Assignment getStringTwAssignment() { return cStringTwAssignment; }
		
		//STRING
		public RuleCall getStringTwSTRINGTerminalRuleCall_0() { return cStringTwSTRINGTerminalRuleCall_0; }
	}
	public class ADDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.ADD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cADDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExp1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExp1ExpressionParserRuleCall_2_0 = (RuleCall)cExp1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExp2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExp2ExpressionParserRuleCall_4_0 = (RuleCall)cExp2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ADD:
		//	'ADD' '(' exp1=Expression ',' exp2=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ADD' '(' exp1=Expression ',' exp2=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'ADD'
		public Keyword getADDKeyword_0() { return cADDKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp1=Expression
		public Assignment getExp1Assignment_2() { return cExp1Assignment_2; }
		
		//Expression
		public RuleCall getExp1ExpressionParserRuleCall_2_0() { return cExp1ExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//exp2=Expression
		public Assignment getExp2Assignment_4() { return cExp2Assignment_4; }
		
		//Expression
		public RuleCall getExp2ExpressionParserRuleCall_4_0() { return cExp2ExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class MULElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.MUL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMULKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExp1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExp1ExpressionParserRuleCall_2_0 = (RuleCall)cExp1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExp2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExp2ExpressionParserRuleCall_4_0 = (RuleCall)cExp2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MUL:
		//	'MUL' '(' exp1=Expression ',' exp2=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'MUL' '(' exp1=Expression ',' exp2=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'MUL'
		public Keyword getMULKeyword_0() { return cMULKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp1=Expression
		public Assignment getExp1Assignment_2() { return cExp1Assignment_2; }
		
		//Expression
		public RuleCall getExp1ExpressionParserRuleCall_2_0() { return cExp1ExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//exp2=Expression
		public Assignment getExp2Assignment_4() { return cExp2Assignment_4; }
		
		//Expression
		public RuleCall getExp2ExpressionParserRuleCall_4_0() { return cExp2ExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class String0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir3.im.Tw.String0");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//String0:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private final ProgramElements pProgram;
	private final StatementElements pStatement;
	private final OpBoolElements pOpBool;
	private final ExpressionElements pExpression;
	private final BlockElements pBlock;
	private final IfElements pIf;
	private final DeclarationVarElements pDeclarationVar;
	private final ANDElements pAND;
	private final ORElements pOR;
	private final Tweets_userElements pTweets_user;
	private final Tweets_locationElements pTweets_location;
	private final Tweets_entityElements pTweets_entity;
	private final Tweets_dateElements pTweets_date;
	private final ProportionPositifElements pProportionPositif;
	private final ProportionNegatifElements pProportionNegatif;
	private final CountTweetElements pCountTweet;
	private final CountVisitProfilElements pCountVisitProfil;
	private final CroissanceAbonneElements pCroissanceAbonne;
	private final MoyFollowersElements pMoyFollowers;
	private final MoyFavoritedElements pMoyFavorited;
	private final GREATERElements pGREATER;
	private final LESSElements pLESS;
	private final EQUALSElements pEQUALS;
	private final UtilisationVarElements pUtilisationVar;
	private final PrintElements pPrint;
	private final StringTwElements pStringTw;
	private final ADDElements pADD;
	private final MULElements pMUL;
	private final String0Elements pString0;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TwGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pStatement = new StatementElements();
		this.pOpBool = new OpBoolElements();
		this.pExpression = new ExpressionElements();
		this.pBlock = new BlockElements();
		this.pIf = new IfElements();
		this.pDeclarationVar = new DeclarationVarElements();
		this.pAND = new ANDElements();
		this.pOR = new ORElements();
		this.pTweets_user = new Tweets_userElements();
		this.pTweets_location = new Tweets_locationElements();
		this.pTweets_entity = new Tweets_entityElements();
		this.pTweets_date = new Tweets_dateElements();
		this.pProportionPositif = new ProportionPositifElements();
		this.pProportionNegatif = new ProportionNegatifElements();
		this.pCountTweet = new CountTweetElements();
		this.pCountVisitProfil = new CountVisitProfilElements();
		this.pCroissanceAbonne = new CroissanceAbonneElements();
		this.pMoyFollowers = new MoyFollowersElements();
		this.pMoyFavorited = new MoyFavoritedElements();
		this.pGREATER = new GREATERElements();
		this.pLESS = new LESSElements();
		this.pEQUALS = new EQUALSElements();
		this.pUtilisationVar = new UtilisationVarElements();
		this.pPrint = new PrintElements();
		this.pStringTw = new StringTwElements();
		this.pADD = new ADDElements();
		this.pMUL = new MULElements();
		this.pString0 = new String0Elements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("esir3.im.Tw".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	{Program} 'Program' '{' (statement+=Statement (';' statement+=Statement)*)? '}';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Statement:
	//	Block | If | DeclarationVar | AND | OR | tweets_user | tweets_location | tweets_entity | tweets_date |
	//	ProportionPositif | ProportionNegatif | countTweet | countVisitProfil | CroissanceAbonne | moyFollowers |
	//	moyFavorited | GREATER | LESS | EQUALS | UtilisationVar | print | StringTw | ADD | MUL;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//OpBool:
	//	AND | OR | GREATER | LESS | EQUALS;
	public OpBoolElements getOpBoolAccess() {
		return pOpBool;
	}
	
	public ParserRule getOpBoolRule() {
		return getOpBoolAccess().getRule();
	}
	
	//Expression:
	//	AND | OR | tweets_user | tweets_location | tweets_entity | tweets_date | ProportionPositif | ProportionNegatif |
	//	countTweet | countVisitProfil | CroissanceAbonne | moyFollowers | moyFavorited | GREATER | LESS | EQUALS |
	//	UtilisationVar | StringTw | ADD | MUL;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Block:
	//	{Block} '{' (statement+=Statement (";" statement+=Statement)*)? '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//If:
	//	'if' '(' condition=OpBool ')' ifBlock=Block ('else' elseBlock=Block)?;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//DeclarationVar:
	//	name=String0? ':=' opDroite=Expression;
	public DeclarationVarElements getDeclarationVarAccess() {
		return pDeclarationVar;
	}
	
	public ParserRule getDeclarationVarRule() {
		return getDeclarationVarAccess().getRule();
	}
	
	//AND:
	//	'AND' '(' exp1=Expression ',' exp2=Expression ')';
	public ANDElements getANDAccess() {
		return pAND;
	}
	
	public ParserRule getANDRule() {
		return getANDAccess().getRule();
	}
	
	//OR:
	//	'OR' '(' exp1=Expression ',' exp2=Expression ')';
	public ORElements getORAccess() {
		return pOR;
	}
	
	public ParserRule getORRule() {
		return getORAccess().getRule();
	}
	
	//tweets_user:
	//	'tweets_user' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
	public Tweets_userElements getTweets_userAccess() {
		return pTweets_user;
	}
	
	public ParserRule getTweets_userRule() {
		return getTweets_userAccess().getRule();
	}
	
	//tweets_location:
	//	'tweets_location' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
	public Tweets_locationElements getTweets_locationAccess() {
		return pTweets_location;
	}
	
	public ParserRule getTweets_locationRule() {
		return getTweets_locationAccess().getRule();
	}
	
	//tweets_entity:
	//	'tweets_entity' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
	public Tweets_entityElements getTweets_entityAccess() {
		return pTweets_entity;
	}
	
	public ParserRule getTweets_entityRule() {
		return getTweets_entityAccess().getRule();
	}
	
	//tweets_date:
	//	'tweets_date' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
	public Tweets_dateElements getTweets_dateAccess() {
		return pTweets_date;
	}
	
	public ParserRule getTweets_dateRule() {
		return getTweets_dateAccess().getRule();
	}
	
	//ProportionPositif:
	//	'ProportionPositif' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
	public ProportionPositifElements getProportionPositifAccess() {
		return pProportionPositif;
	}
	
	public ParserRule getProportionPositifRule() {
		return getProportionPositifAccess().getRule();
	}
	
	//ProportionNegatif:
	//	'ProportionNegatif' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
	public ProportionNegatifElements getProportionNegatifAccess() {
		return pProportionNegatif;
	}
	
	public ParserRule getProportionNegatifRule() {
		return getProportionNegatifAccess().getRule();
	}
	
	//countTweet:
	//	'countTweet' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
	public CountTweetElements getCountTweetAccess() {
		return pCountTweet;
	}
	
	public ParserRule getCountTweetRule() {
		return getCountTweetAccess().getRule();
	}
	
	//countVisitProfil:
	//	'countVisitProfil' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
	public CountVisitProfilElements getCountVisitProfilAccess() {
		return pCountVisitProfil;
	}
	
	public ParserRule getCountVisitProfilRule() {
		return getCountVisitProfilAccess().getRule();
	}
	
	//CroissanceAbonne:
	//	'CroissanceAbonne' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
	public CroissanceAbonneElements getCroissanceAbonneAccess() {
		return pCroissanceAbonne;
	}
	
	public ParserRule getCroissanceAbonneRule() {
		return getCroissanceAbonneAccess().getRule();
	}
	
	//moyFollowers:
	//	'moyFollowers' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
	public MoyFollowersElements getMoyFollowersAccess() {
		return pMoyFollowers;
	}
	
	public ParserRule getMoyFollowersRule() {
		return getMoyFollowersAccess().getRule();
	}
	
	//moyFavorited:
	//	'moyFavorited' '{' (args+=UtilisationVar ("," args+=UtilisationVar)*) '}';
	public MoyFavoritedElements getMoyFavoritedAccess() {
		return pMoyFavorited;
	}
	
	public ParserRule getMoyFavoritedRule() {
		return getMoyFavoritedAccess().getRule();
	}
	
	//GREATER:
	//	'GREATER' '(' exp1=Expression ',' exp2=Expression ')';
	public GREATERElements getGREATERAccess() {
		return pGREATER;
	}
	
	public ParserRule getGREATERRule() {
		return getGREATERAccess().getRule();
	}
	
	//LESS:
	//	'LESS' '(' exp1=Expression ',' exp2=Expression ')';
	public LESSElements getLESSAccess() {
		return pLESS;
	}
	
	public ParserRule getLESSRule() {
		return getLESSAccess().getRule();
	}
	
	//EQUALS:
	//	'EQUALS' '(' exp1=Expression ',' exp2=Expression ')';
	public EQUALSElements getEQUALSAccess() {
		return pEQUALS;
	}
	
	public ParserRule getEQUALSRule() {
		return getEQUALSAccess().getRule();
	}
	
	//UtilisationVar:
	//	nameVar=[DeclarationVar];
	public UtilisationVarElements getUtilisationVarAccess() {
		return pUtilisationVar;
	}
	
	public ParserRule getUtilisationVarRule() {
		return getUtilisationVarAccess().getRule();
	}
	
	//print:
	//	'print' '(' expression=Expression ')';
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//StringTw:
	//	stringTw=STRING;
	public StringTwElements getStringTwAccess() {
		return pStringTw;
	}
	
	public ParserRule getStringTwRule() {
		return getStringTwAccess().getRule();
	}
	
	//ADD:
	//	'ADD' '(' exp1=Expression ',' exp2=Expression ')';
	public ADDElements getADDAccess() {
		return pADD;
	}
	
	public ParserRule getADDRule() {
		return getADDAccess().getRule();
	}
	
	//MUL:
	//	'MUL' '(' exp1=Expression ',' exp2=Expression ')';
	public MULElements getMULAccess() {
		return pMUL;
	}
	
	public ParserRule getMULRule() {
		return getMULAccess().getRule();
	}
	
	//String0:
	//	ID;
	public String0Elements getString0Access() {
		return pString0;
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
