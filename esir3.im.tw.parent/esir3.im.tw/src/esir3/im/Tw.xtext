// automatically generated by Xtext
grammar esir3.im.Tw with org.eclipse.xtext.common.Terminals

import "http://www.example.org/twitterModel2"
//import "platform:/resource/twitterModel2/model/twitterModel2.ecore"
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program :
	{Program}
	'Program'
	'{'
		( statement+=Statement ( ";" statement+=Statement)*  )?
	'}';

SupEgal: "tfhg"
;


Statement :
	Block | If | ExpUnaire | Const | ExpBool | Affectation;



Command :
	tweets_user | tweets_location | tweets_entity | tweets_date | ProportionPositif | ProportionNegatif | countTweet | countVisitProfil | CroissanceAbonne | moyFollowers | moyFavorited;

opBool :
	And | Or | Xor | Greater | Less | Equals;

Expression :
	ExpUnaire | Const | ExpBool | Affectation;



Block :
	{Block}
	'{'
		(  statement+=Statement ( ";" statement+=Statement)*)?
	'}';

If :
	'If' LC '(' condition=[ExpBool|EString] LC ')'
	'{'
		('elseBlock' elseBlock=[Block|EString])?
		'ifBlock' ifBlock=[Block|EString]
		
	'}';

LC:
	(' ')*
;

EString:
	STRING
;

ExpUnaire returns ExpUnaire:
	{ExpUnaire}
	'ExpUnaire'
	'{'
		('command' command=[Command|EString])?
	'}';

Const returns Const:
	{Const}
	'Const'
	;

ExpBool returns ExpBool:
	'ExpBool'
	'{'
		'opBool' opBool=[opBool|EString]
		'expressionG' expressionG=Expression
		'expressionD' expressionD=Expression
	'}';

Affectation returns Affectation:
	'Affectation'
	'{'
		'variable' variable=[Variable|EString]
		('opDroite' opDroite=[Expression|EString])?
	'}';

Args returns Args:
	{Args}
	'Args'
	'{'
		('arg' arg=String0)?
	'}';

tweets_user returns tweets_user:
	'tweets_user'
	'{'
		'args' '(' args+=[Args|EString] ( "," args+=[Args|EString])* ')' 
	'}';

tweets_location returns tweets_location:
	'tweets_location'
	'{'
		'args' '(' args+=[Args|EString] ( "," args+=[Args|EString])* ')' 
	'}';

tweets_entity returns tweets_entity:
	'tweets_entity'
	'{'
		'args' '(' args+=[Args|EString] ( "," args+=[Args|EString])* ')' 
	'}';

tweets_date returns tweets_date:
	'tweets_date'
	'{'
		'args' '(' args+=[Args|EString] ( "," args+=[Args|EString])* ')' 
	'}';

ProportionPositif returns ProportionPositif:
	'ProportionPositif'
	'{'
		'args' '(' args+=[Args|EString] ( "," args+=[Args|EString])* ')' 
	'}';

ProportionNegatif returns ProportionNegatif:
	'ProportionNegatif'
	'{'
		'args' '(' args+=[Args|EString] ( "," args+=[Args|EString])* ')' 
	'}';

countTweet returns countTweet:
	'countTweet'
	'{'
		'args' '(' args+=[Args|EString] ( "," args+=[Args|EString])* ')' 
	'}';

countVisitProfil returns countVisitProfil:
	'countVisitProfil'
	'{'
		'args' '(' args+=[Args|EString] ( "," args+=[Args|EString])* ')' 
	'}';

CroissanceAbonne returns CroissanceAbonne:
	'CroissanceAbonne'
	'{'
		'args' '(' args+=[Args|EString] ( "," args+=[Args|EString])* ')' 
	'}';

moyFollowers returns moyFollowers:
	'moyFollowers'
	'{'
		'args' '(' args+=[Args|EString] ( "," args+=[Args|EString])* ')' 
	'}';

moyFavorited returns moyFavorited:
	'moyFavorited'
	'{'
		'args' '(' args+=[Args|EString] ( "," args+=[Args|EString])* ')' 
	'}';

String0 returns type::String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;

And returns And:
	{And}
	'And'
	;

Or returns Or:
	{Or}
	'Or'
	;

Xor returns Xor:
	{Xor}
	'Xor'
	;

Greater returns Greater:
	{Greater}
	'Greater'
	;

Less returns Less:
	{Less}
	'Less'
	;

Equals returns Equals:
	{Equals}
	'Equals'
	;

Variable returns Variable:
	{Variable}
	'Variable'
	'{'
		('nameVariable' nameVariable=String0)?
	'}';
